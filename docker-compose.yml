version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api
    ports:
      - "8081:8081"
    volumes:
      - ~/.composer:/root/.composer  # Ajoutez cette ligne
      - ./monitored-app:/var/www/html
    networks:
      - internal
    command: 
      - /bin/sh
      - -c
      - |
        composer install
        php artisan key:generate --force
        php artisan migrate:fresh
        php artisan db:seed
        php artisan serve --host=0.0.0.0 --port=8081  # Ajustez le port pour chaque service
    depends_on:
      db:
        condition: service_healthy

  app1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app1
    ports:
      - "8000:8000"
    volumes:
      - ./monitored-app:/var/www/html
      - ~/.composer:/root/.composer  # Ajoutez cette ligne
    networks:
      - internal
    command: 
      - /bin/sh
      - -c
      - |
        composer install
        php artisan key:generate --force
        php artisan serve --host=0.0.0.0 --port=8000  # Ajustez le port pour chaque service

  app2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app2
    ports:
      - "8001:8001"
    volumes:
      - ./monitored-app:/var/www/html
      - ~/.composer:/root/.composer  # Ajoutez cette ligne
    networks:
      - internal
    command: 
      - /bin/sh
      - -c
      - |
        composer install
        php artisan key:generate --force
        php artisan serve --host=0.0.0.0 --port=8001  # Ajustez le port pour chaque service

  db:
    image: mysql:latest
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: laravel
      MYSQL_ROOT_PASSWORD: secret
    volumes:
      - ./db-data:/var/lib/mysql
    networks:
      - internal
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure:5
  
  # phpmyadmin:
  #   image: phpmyadmin:latest
  #   ports: 
  #     - 9001:80
  #   environment:
  #     - PMA_ARBITRARY=1

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - internal

  grafana:
    image: grafana/grafana
    # container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=secret
      - GF_INSTALL_PLUGINS=grafana-clock-panel
    depends_on:
      - prometheus
    networks:
      - internal

networks:
  internal:
    driver: bridge

volumes:
  dbdata:
  prometheus_data:
  grafana-storage:
  